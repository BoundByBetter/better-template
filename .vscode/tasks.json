// Cmd/Cntrl+Shift+P -> Tasks: Run Task -> Select Task
// Cmd/Cntrl+Shift+P -> Fold Level 3 to collapse task definitions to just names.
{
  "version": "2.0.0",
  "tasks": [
    
    // Dependencies
		{ "label": "Dependencies: Install",
			"detail": "Runs yarn install to install all dependencies. Included for completeness.",
      "type": "shell",
      "command": "yarn deps:install",
      "problemMatcher": []
    },
		{ "label": "Dependencies: Check",
			"detail": "Uses npm-check-updates and expo install --check to help identify available updates.  Beware, npm-check-updates will return updates that you should not install because of Expo.",
      "type": "shell",
      "command": "yarn deps:check-all",
      "problemMatcher": []
    },
		{ "label": "Dependencies: Fix",
			"detail": "Uses expo to update mismatched dependencies across all projects.",
      "type": "shell",
      "command": "yarn deps:fix-all",
      "problemMatcher": []
    },
		{ "label": "Dependencies: Add dev",
			"detail": "Uses expo to add new dev dependencies to a workspace.",
      "type": "shell",
      "command": "yarn deps:add-dev ${input:dependencies}",
      "options": {
        "cwd": "${workspaceFolder}/${input:selectProjectFolder}"
      },
      "problemMatcher": []
    },
		{ "label": "Dependencies: Add",
			"detail": "Uses expo to add new dev dependencies to a workspace.",
      "type": "shell",
      "command": "yarn deps:add ${input:dependencies}",
      "options": {
        "cwd": "${workspaceFolder}/${input:selectProjectFolder}"
      },
      "problemMatcher": []
    },
		{ "label": "Dependencies: Upgrade",
			"detail": "Upgrades the specified dependency in the root and each workspace where it exists",
      "type": "shell",
      "command": "yarn deps:upgrade ${input:dependencies}",
      "problemMatcher": []
    },

    // Code
    { "label": "Code: Lint",
      "type": "shell",
      "command": "yarn",
      "args": ["code:lint-all"],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": ["$eslint-stylish"],
      "detail": "Lints all ts, tsx, js, and jsx files."
    },
    { "label": "Code: Lint and watch",
      "type": "shell",
      "command": "yarn",
      "args": [
        "chokidar",
        "'packages/**/*.js'",
        "'packages/**/*.ts'",
        "'packages/**/*.tsx'",
        "'packages/**/*.test.ts'",
        "'packages/**/*.test.tsx'",
        "'apps/**/*.js'",
        "'apps/**/*.ts'",
        "'apps/**/*.tsx'",
        "'apps/**/*.test.ts'",
        "'apps/**/*.test.tsx'",
        "-c",
        "yarn code:lint-all"
      ],
      "dependsOn": ["Lint"],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": ["$eslint-stylish"],
      "isBackground": true,
      "detail": "Lints all ts, tsx, js, and jsx files on change."
    },
    { "label": "Code: Compile",
      "type": "shell",
      "command": "yarn",
      "args": ["code:compile-all"],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": ["$tsc"],
      "detail": "Compiles all ts, tsx, js, and jsx files."
    },
    { "label": "Code: Compile Clean",
      "type": "shell",
      "command": "yarn",
      "args": ["code:compile-all", "--clean"],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": ["$tsc"],
      "detail": "Compiles all ts, tsx, js, and jsx files with the --clean flag."
    },
    { "label": "Code: Compile and watch",
      "type": "shell",
      "command": "yarn",
      "args": [
        "chokidar",
        "'packages/**/*.js'",
        "'packages/**/*.ts'",
        "'packages/**/*.tsx'",
        "'packages/**/*.test.ts'",
        "'packages/**/*.test.tsx'",
        "'apps/**/*.js'",
        "'apps/**/*.ts'",
        "'apps/**/*.tsx'",
        "'apps/**/*.test.ts'",
        "'apps/**/*.test.tsx'",
        "-c",
        "yarn code:compile-all",
        "--initial"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": ["$eslint-stylish"],
      "isBackground": true,
      "detail": "Compiles all ts, tsx, js, and jsx files on change."
    },

    // Devices
    { "label": "Devices: List Android devices",
      "type": "shell",
      "command": "yarn devices:list",
      "problemMatcher": [],
      "detail": "Lists all android devices connected to the computer."
    },
    { "label": "Devices: Switch Android device to wireless",
      "type": "shell",
      "command": "yarn devices:wireless-switch",
      "problemMatcher": [],
      "detail": "Switches the android device to using a tcpip connection."
    },
    { "label": "Devices: Connect to Android device wirelessly",
      "type": "shell",
      "command": "yarn devices:wireless-connect ${input:androidDeviceIp}:5555",
      "problemMatcher": [],
      "detail": "Connects to the android device wirelessly."
    },
    { "label": "Devices: Disconnect from Android device",
      "type": "shell",
      "command": "yarn devices:wireless-disconnect ${input:androidDeviceName}",
      "problemMatcher": [],
      "detail": "Disconnects the named android device."
    },
    
    // Mobile
    { "label": "Mobile: Build app for Android with EAS locally",
      "type": "shell",
      "command": "yarn",
      "args": ["${input:selectMobileApp}:build-android-local-${input:androidProfile}"],
      "problemMatcher": [],
      "detail": "Builds the selected app for android for the selected profile."
    },
    { "label": "Mobile: Install EAS locally built APK",
      "type": "shell",
      "command": "yarn",
      "args": ["${input:selectMobileApp}:install-android-${input:androidProfile}"],
      "problemMatcher": [],
      "detail": "Installs the selected app for android for the selected profile."
    },
    { "label": "Mobile: Build and Install EAS locally built APK",
      "type": "shell",
      "command": "yarn",
      "args": ["${input:selectMobileApp}:build-install-android-${input:androidProfile}"],
      "problemMatcher": [],
      "detail": "Builds and installs the selected app for android for the selected profile."
    },
    { "label": "Mobile: Build and install Android app using Expo",
      "type": "shell",
      "command": "yarn",
      "args": ["app:run-android"],
      "problemMatcher": [],
      "detail": "Starts the app for android."
    },
    
    // Testing
    { "label": "Unit Testing: Run all tests",
      "type": "shell",
      "command": "yarn",
      "args": ["test:run-all"],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "problemMatcher": {
        "source": "jest",
        "fileLocation": ["relative", "${workspaceFolder}"],
        "pattern": [
          {
            "regexp": "^\\s*(\\d+|)\\)\\s(.*)$",
            "message": 2
          },
          {
            "regexp": "^\\s*at\\s(.*)\\s\\(([^:]*):(\\d+):(\\d+)\\)$",
            "file": 2,
            "line": 3,
            "column": 4
          }
        ]
      },
      "detail": "Runs all tests in the project.  Use the jest runner when you want to watch."
    },
    { "label": "Unit Testing: Run all tests with coverage",
      "type": "shell",
      "command": "yarn",
      "args": ["test:cover-all"],
      "problemMatcher": [],
      "detail": "Starts the app using yarn start:app:web command."
    },
		{ "label": "Unit Testing: Run workspace tests",
			"detail": "Runs all unit tests in the selected workspace.",
      "type": "shell",
      "command": "yarn",
      "args": [
        "test:run-all",
        "${input:selectProjectFolder}"
      ],
      "group": "test",
      "problemMatcher": {
        "source": "jest",
        "fileLocation": ["relative", "${workspaceFolder}"],
        "pattern": [
          {
            "regexp": "^\\s*(\\d+|)\\)\\s(.*)$",
            "message": 2
          },
          {
            "regexp": "^\\s*at\\s(.*)\\s\\(([^:]*):(\\d+):(\\d+)\\)$",
            "file": 2,
            "line": 3,
            "column": 4
          }
        ]
      },
    },
		{ "label": "Unit Testing: Run workspace tests with coverage",
			"detail": "Runs all unit tests in the selected workspace.",
      "type": "shell",
      "command": "yarn",
      "args": [
        "test:cover-all",
        "${input:selectProjectFolder}",
        "--collectCoverageFrom=${input:selectProjectFolder}/src/**/*.{js,jsx,ts,tsx}"    
      ],
      "group": "test",
      "problemMatcher": {
        "source": "jest",
        "fileLocation": ["relative", "${workspaceFolder}"],
        "pattern": [
          {
            "regexp": "^\\s*(\\d+|)\\)\\s(.*)$",
            "message": 2
          },
          {
            "regexp": "^\\s*at\\s(.*)\\s\\(([^:]*):(\\d+):(\\d+)\\)$",
            "file": 2,
            "line": 3,
            "column": 4
          }
        ]
      },
    },
    { "label": "Unit Testing: View code coverage",
      "detail": "Serves the code coverage report using npx serve.",
      "type": "shell",
      "command": "npx",
      "args": [
        "serve",
        "${workspaceFolder}/coverage/lcov-report"
      ],
      "problemMatcher": [],
      "options": {
        "cwd": "${workspaceFolder}"
      }
    },
    
    // Development
    { "label": "Dev: Start dev server for web",
      "type": "shell",
      "command": "yarn",
      "args": ["${input:selectWebApp}:web"],
      "problemMatcher": [],
      "detail": "Starts metro bundler for the web app you specify."
    },
    { "label": "Dev: Export and serve a web app",
      "type": "shell",
      "command": "yarn",
      "args": ["${input:selectWebApp}:export-and-serve"],
      "problemMatcher": [],
      "detail": "Exports and serves the web app you specify."
    },
    { "label": "Dev: Start dev server for Android app",
      "type": "shell",
      "command": "yarn",
      "args": ["${input:selectMobileApp}:android"],
      "problemMatcher": [],
      "detail": "Starts the selected app for android."
    },
    { "label": "Dev: Start dev server for Sync",
      "type": "shell",
      "command": "yarn",
      "args": ["server:start"],
      "detail": "Starts the sync server."
    },
    
    // E2E Web
    { "label": "E2E Web: Open Cypress for E2E test development",
      "type": "shell",
      "command": "yarn",
      "args": ["${input:selectWebApp}:web-e2e-dev"],
      "problemMatcher": [],
      "detail": "Opens cypress for developing e2e tests for the app you specify."
    },
    { "label": "E2E Web: Start Dev Server and Open Cypress for E2E test development",
      "type": "shell",
      "command": "yarn",
      "args": ["${input:selectWebApp}:start-and-web-e2e-dev"],
      "problemMatcher": [],
      "detail": "Starts the dev server for the app you specify and opens cypress for e2e test development."
    },
    { "label": "E2E Web: Export and Serve App and Run Cypress E2E tests",
      "type": "shell",
      "command": "yarn",
      "args": ["${input:selectWebApp}:export-and-serve-e2e"],
      "problemMatcher": [],
      "detail": "Exports and serves the app you specify and runs the e2e tests."
    },
    { "label": "E2E Web: Run all tests",
      "type": "shell",
      "command": "yarn",
      "args": ["e2e:web"],
      "problemMatcher": [],
      "detail": "Exports and serves each web app and then runs the e2e tests."
    },

    // E2E Mobile
    { "label": "E2E Mobile: Run for selected app",
      "type": "shell",
      "command": "yarn",
      "args": ["${input:selectMobileApp}:mobile-e2e"],
      "problemMatcher": [],
      "detail": "Starts the app you specify and runs the e2e tests."
    },
    { "label": "E2E Mobile: Build, Install, and Run all tests",
      "type": "shell",
      "command": "yarn",
      "args": ["e2e:mobile"],
      "problemMatcher": [],
      "detail": "Builds the app you specify, installs it, and runs the e2e tests."
    },
    // { "label": "E2E Web: Run app tests" },
    // { "label": "E2E Web: Run site tests" },
    // { "label": "E2E Web: Run admin tests" },

    // Server
    { "label": "Server: Start Azure Function Emulator",
      "type": "shell",
      "command": "yarn",
      "args": ["server-af:start"],
      "problemMatcher": [],
      "detail": "Starts the Azure Function Emulator."
    },
    
    // Pipeline
    { "label": "Pipeline: Pre-Commit",
      "type": "shell",
      "command": "yarn",
      "args": ["pipeline:pre-commit"],
      "problemMatcher": [],
      "detail": "Runs the pre-commit pipeline. Make sure an android device is connected prior to running this."
    },
  ],
  "inputs": [
    { "id": "selectProjectFolder",
			"type": "pickString",
			"description": "Select a project",
			"options": [
        "",
        "apps/app", 
        "apps/admin", 
        "apps/site", 
        "packages/features", 
        "packages/shared", 
        "packages/state", 
        "packages/ui",
        "servers/dev-server",
        "servers/azure-functions"
      ],
    },
    { "id": "dependencies",
      "type": "promptString",
      "description": "Enter a space separate list of dependencies to install.",
    },
    { "id": "androidDeviceIp",
      "type": "promptString",
      "description": "Enter the IP address of the Android device.",
    },
    { "id": "androidDeviceName",
      "type": "promptString",
      "description": "Enter the name of the Android device.",
    },
    { "id": "selectWebApp",
      "type": "pickString",
      "description": "Select an app",
      "options": [
        "app",
        "admin",
        "site"
      ],
    },
    { "id": "selectMobileApp",
      "type": "pickString",
      "description": "Select an app",
      "options": [
        "app",
        "admin"
      ],
    },
    { "id": "androidProfile",
      "type": "pickString",
      "description": "Select an android profile",
      "options": [
        "dev",
        "preview"
      ],
    }
  ]
}
