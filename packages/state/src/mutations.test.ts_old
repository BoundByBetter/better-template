import { store } from './store';
import { addPost, updatePost, deletePost, addFeature, updateFeature, deleteFeature, updateCurrentUser } from './mutations';
import { Post, Feature, User, PostStatus, FeatureStatus } from '@boundbybetter/shared';
import { describe, it, expect, beforeEach } from '@jest/globals';

describe('mutations', () => {
  beforeEach(() => {
    store.delTables();
  });

  describe('addPost', () => {
    it('should add a post to the store', () => {
      const post: Post = {
        id: '1',
        title: 'Test Post',
        status: PostStatus.ACTIVE,
        rating: 5,
        createdAt: '2023-05-01T00:00:00.000Z'
      };
      addPost(post);
      const storedPost = store.getRow('posts', '1');
      expect(storedPost).toEqual(post);
    });
  });

  describe('updatePost', () => {
    it('should update an existing post in the store', () => {
      const post: Post = {
        id: '1',
        title: 'Test Post',
        status: PostStatus.ACTIVE,
        rating: 5,
        createdAt: '2023-05-01T00:00:00.000Z'
      };
      store.setRow('posts', post.id, post as any);
      
      const updates: Partial<Post> = { title: 'Updated Post', rating: 4 };
      updatePost('1', updates);
      
      const updatedPost = store.getRow('posts', '1');
      expect(updatedPost).toEqual({ ...post, ...updates });
    });
  });

  describe('deletePost', () => {
    it('should delete a post from the store', () => {
      const post: Post = {
        id: '1',
        title: 'Test Post',
        status: PostStatus.ACTIVE,
        rating: 5,
        createdAt: '2023-05-01T00:00:00.000Z'
      };
      store.setRow('posts', post.id, post as any);
      
      deletePost('1');
      
      const deletedPost = store.getRow('posts', '1');
      expect(deletedPost).toEqual({});
    });
  });

  describe('addFeature', () => {
    it('should add a feature to the store', () => {
      const feature: Feature = {
        id: '1',
        key: 'test-feature',
        status: FeatureStatus.ACTIVE,
        groups: ['group1', 'group2']
      };
      addFeature(feature);
      const storedFeature = store.getRow('features', '1');
      expect(storedFeature).toEqual(feature);
    });
  });

  describe('updateFeature', () => {
    it('should update an existing feature in the store', () => {
      const feature: Feature = {
        id: '1',
        key: 'test-feature',
        status: FeatureStatus.ACTIVE,
        groups: ['group1', 'group2']
      };
      store.setRow('features', feature.id, feature as any);
      
      const updates: Partial<Feature> = { status: FeatureStatus.INACTIVE, groups: ['group3'] };
      updateFeature('1', updates);
      
      const updatedFeature = store.getRow('features', '1');
      expect(updatedFeature).toEqual({ ...feature, ...updates });
    });
  });

  describe('deleteFeature', () => {
    it('should delete a feature from the store', () => {
      const feature: Feature = {
        id: '1',
        key: 'test-feature',
        status: FeatureStatus.ACTIVE,
        groups: ['group1', 'group2']
      };
      store.setRow('features', feature.id, feature as any);
      
      deleteFeature('1');
      
      const deletedFeature = store.getRow('features', '1');
      expect(deletedFeature).toEqual({});
    });
  });

  describe('updateCurrentUser', () => {
    it('should update the current user in the store', () => {
      const user: User = {
        userName: 'John Doe',
        userEmail: 'john@example.com',
        groups: ['group1']
      };
      store.setRow('user', 'current', user as any);
      
      const updates: Partial<User> = { userName: 'Jane Doe', groups: ['group1', 'group2'] };
      updateCurrentUser(updates);
      
      const updatedUser = store.getRow('user', 'current');
      expect(updatedUser).toEqual({ ...user, ...updates });
    });
  });
});
