import { useTable, useRow, useCell } from 'tinybase/ui-react';
import { store } from './store';
import { Post, Feature, User, FeatureStatus } from '@boundbybetter/shared';

export const usePosts = (): Post[] | undefined => {
  const posts = useTable('posts', store);
  return Object.keys(posts).length === 0
    ? undefined
    : Object.values(posts).map(
        (post) =>
          ({
            id: post.id,
            title: post.title,
            status: post.status,
            content: post.content,
            createdAt: post.createdAt,
            // Add any other fields that are part of the Post type
          }) as Post,
      );
};

export const usePost = (postId: string): Post | undefined => {
  const post = useRow('posts', postId, store);
  return Object.keys(post).length === 0
    ? undefined
    : ({
        id: post.id,
        title: post.title,
        status: post.status,
        content: post.content,
        createdAt: post.createdAt,
        // Add any other fields that are part of the Post type
      } as Post);
};

export const usePostStatus = (postId: string): FeatureStatus | undefined => {
  const status = useCell('posts', postId, 'status', store);
  return status === undefined || status === null
    ? undefined
    : (status as FeatureStatus);
};

// New hooks
export const useFeature = (featureId: string): Feature | undefined => {
  const feature = useRow('features', featureId, store);
  return Object.keys(feature).length === 0
    ? undefined
    : ({
        id: feature.id,
        key: feature.key,
        status: feature.status as FeatureStatus,
        groups: feature.groups ? JSON.parse(feature.groups.toString()) : [],
        createdAt: feature.createdAt ? feature.createdAt : undefined,
      } as Feature);
};

export const useCurrentUser = (): User | undefined => {
  const user = useRow('user', 'current', store);
  return Object.keys(user).length === 0
    ? undefined
    : ({
        id: user.id,
        userName: user.userName,
        userEmail: user.userEmail,
        groups: user.groups ? JSON.parse(user.groups.toString()) : [],
      } as User);
};

export const useFeatures = (): Feature[] | undefined => {
  const features = useTable('features', store);
  return Object.keys(features).length === 0
    ? undefined
    : Object.values(features).map(
        (feature) =>
          ({
            id: feature.id,
            key: feature.key,
            status: feature.status,
            groups: feature.groups ? JSON.parse(feature.groups.toString()) : [],
            // Add any other fields that are part of the Feature type
          }) as Feature,
      );
};
